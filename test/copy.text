const NAME = 'network-info'
const $ = new Env(NAME)

// ÁΩëÁªúÁä∂ÊÄÅÁõ∏ÂÖ≥ÂèòÈáè
let lastNetworkType = '' // ËÆ∞ÂΩï‰∏ä‰∏ÄÊ¨°ÁöÑÁΩëÁªúÁ±ªÂûã
let lastWifiName = '' // ËÆ∞ÂΩï‰∏ä‰∏ÄÊ¨°ÁöÑ WiFi ÂêçÁß∞
let lastNetworkStatus = true // ËÆ∞ÂΩï‰∏ä‰∏ÄÊ¨°ÁöÑÁΩëÁªúÁä∂ÊÄÅ

// ‰ªéÊåÅ‰πÖÂåñÂ≠òÂÇ®ËØªÂèñ‰∏äÊ¨°ÁöÑÁΩëÁªúÁä∂ÊÄÅ
try {
  const savedState = $.getjson('lastNetworkState')
  if (savedState) {
    lastNetworkType = savedState.type || ''
    lastWifiName = savedState.wifi || ''
    lastNetworkStatus = savedState.connected || true
  }
} catch (e) {
  $.logErr('ËØªÂèñ‰øùÂ≠òÁöÑÁΩëÁªúÁä∂ÊÄÅÂ§±Ë¥•:', e)
}

let arg
if (typeof $argument != 'undefined') {
  arg = Object.fromEntries($argument.split('&').map(item => item.split('=')))
} else {
  arg = {}
}

$.log(`‰º†ÂÖ•ÁöÑ $argument: ${$.toStr(arg)}`)

arg = { ...arg, ...$.getjson(NAME, {}) }

$.log(`‰ªéÊåÅ‰πÖÂåñÂ≠òÂÇ®ËØªÂèñÂèÇÊï∞Âêé: ${$.toStr(arg)}`)

if (typeof $environment !== 'undefined' && $.lodash_get($environment, 'executor') === 'event-network') {
  $.log(`QX ‰∫ã‰ª∂ËÑöÊú¨‰∏çËÉΩÂ∏¶ÂèÇ ‰øÆÊ≠£ËøêË°åÁéØÂ¢É`)
  $.lodash_set(arg, 'TYPE', 'EVENT')
}

if (!isInteraction() && !isRequest() && !isTile() && !isPanel()) {
  $.log(`ÂèÇÊï∞‰∏∫Á©∫ ÈùûÂèØ‰∫§‰∫íÊìç‰Ωú, ÈùûËØ∑Ê±Ç, ÈùûÈù¢ÊùøÁöÑÊÉÖÂÜµ‰∏ã, ‰øÆÊ≠£ËøêË°åÁéØÂ¢É`)
  $.lodash_set(arg, 'TYPE', 'EVENT')
}

if (isRequest()) {
  arg = { ...arg, ...parseQueryString($request.url) }
  $.log(`‰ªéËØ∑Ê±ÇÂêéËØªÂèñÂèÇÊï∞Âêé: ${$.toStr(arg)}`)
}

// Ëé∑ÂèñÁΩëÁªúÁä∂ÊÄÅÁöÑÂáΩÊï∞
async function getNetworkInfo() {
  let networkType = ''
  let wifiName = ''
  let isConnected = false
  let cellularType = ''

  if (typeof $network !== 'undefined') {
    // Surge/Loon ÁéØÂ¢É
    const wifi = $.lodash_get($network, 'wifi')
    const v4 = $.lodash_get($network, 'v4')
    const v6 = $.lodash_get($network, 'v6')
    const cellular = $.lodash_get($network, 'cellular')
    
    isConnected = !!(wifi?.ssid || v4?.primaryAddress || v6?.primaryAddress)
    
    if (wifi?.ssid) {
      networkType = 'WiFi'
      wifiName = wifi.ssid
    } else if (v4?.primaryAddress || v6?.primaryAddress) {
      networkType = 'Cellular'
      cellularType = cellular?.type || ''
    }
  } else if (typeof $environment !== 'undefined') {
    // QX ÁéØÂ¢É
    const network = $.lodash_get($environment, 'network')
    isConnected = network !== 'NO-NETWORK'
    
    if (network === 'WIFI') {
      networkType = 'WiFi'
      wifiName = $.lodash_get($environment, 'ssid')
    } else if (network === 'CELLULAR') {
      networkType = 'Cellular'
      // QX ÊöÇÊó∂Êó†Ê≥ïËé∑ÂèñÂÖ∑‰ΩìÁöÑËúÇÁ™ùÁΩëÁªúÁ±ªÂûã
    }
  }

  return {
    networkType,
    wifiName,
    isConnected,
    cellularType
  }
}

// Ê†ºÂºèÂåñÁΩëÁªúÁ±ªÂûãÊòæÁ§∫
function formatNetworkType(type, cellular) {
  if (type === 'WiFi') return 'WiFi'
  if (type === 'Cellular') {
    if (cellular) {
      // Â∞Ü 5G/4G/3G/2G Á≠âÊòæÁ§∫Ê†ºÂºèÂåñ
      return cellular.toUpperCase()
    }
    return 'ËúÇÁ™ùÁΩëÁªú'
  }
  return 'Êú™Áü•'
}

const keya = 'spe'
const keyb = 'ge'
const keyc = 'pin'
const keyd = 'gan'
const keye = 'pi'
const keyf = 'ob'
const keyg = 'qi'
const keyh = 'xin'
const bay = 'edtest'

let result = {}
let proxy_policy = ''
let title = ''
let content = ''

!(async () => {
  // Ëé∑ÂèñÂΩìÂâçÁΩëÁªúÁä∂ÊÄÅ
  const { networkType, wifiName, isConnected, cellularType } = await getNetworkInfo()
  
  // ‰øùÂ≠òÂΩìÂâçÁΩëÁªúÁä∂ÊÄÅ
  $.setjson({
    type: networkType,
    wifi: wifiName,
    connected: isConnected
  }, 'lastNetworkState')
  
  // Ê£ÄÊµãÁΩëÁªúÁä∂ÊÄÅÂèòÂåñ
  if (isConnected !== lastNetworkStatus) {
    if (isConnected) {
      const currentType = formatNetworkType(networkType, cellularType)
      const detail = networkType === 'WiFi' ? `WiFi: ${wifiName || 'Êú™Áü•'}` : currentType
      await notify('ÁΩëÁªúÂ∑≤ËøûÊé• üü¢', '', detail)
    } else {
      await notify('ÁΩëÁªúÂ∑≤Êñ≠ÂºÄ üî¥', '', 'ËØ∑Ê£ÄÊü•ÁΩëÁªúËÆæÁΩÆ')
      $.done()
      return
    }
  }
  
  // Ê£ÄÊµãÁΩëÁªúÁ±ªÂûãÂèòÂåñ
  if (networkType !== lastNetworkType) {
    const newType = formatNetworkType(networkType, cellularType)
    const oldType = formatNetworkType(lastNetworkType)
    if (networkType === 'WiFi') {
      await notify('ÁΩëÁªúÂàáÊç¢ üîÅ', '', `${oldType} ‚Üí WiFi: ${wifiName || 'Êú™Áü•'}`)
    } else if (networkType === 'Cellular') {
      await notify('ÁΩëÁªúÂàáÊç¢ üîÅ', '', `${oldType} ‚Üí ${newType}`)
    }
  } else if (networkType === 'WiFi' && wifiName !== lastWifiName) {
    // WiFi ÂêçÁß∞ÂèòÂåñ
    await notify('WiFi ÂàáÊç¢ üîÅ', '', `${lastWifiName || 'Êú™Áü•'} ‚Üí ${wifiName || 'Êú™Áü•'}`)
  }
  
  // Êõ¥Êñ∞‰∏ä‰∏ÄÊ¨°ÁöÑÁä∂ÊÄÅ
  lastNetworkStatus = isConnected
  lastNetworkType = networkType
  lastWifiName = wifiName

  // Â¶ÇÊûúÊ≤°ÊúâÁΩëÁªúËøûÊé•,Áõ¥Êé•ÁªìÊùü
  if (!isConnected) {
    $.done()
    return
  }

  if ($.lodash_get(arg, 'TYPE') === 'EVENT') {
    const eventDelay = parseFloat($.lodash_get(arg, 'EVENT_DELAY') || 3)
    $.log(`ÁΩëÁªúÂèòÂåñ, Á≠âÂæÖ ${eventDelay} ÁßíÂêéÂºÄÂßãÊü•ËØ¢`)
    if (eventDelay) {
      await $.wait(1000 * eventDelay)
    }
  }

  if (isTile()) {
    await notify('ÁΩëÁªú‰ø°ÊÅØ', 'Èù¢Êùø', 'ÂºÄÂßãÊü•ËØ¢')
  }

  let SSID = ''
  let LAN = ''
  let LAN_IPv4 = ''
  let LAN_IPv6 = ''
  if (typeof $network !== 'undefined') {
    $.log($.toStr($network))
    const v4 = $.lodash_get($network, 'v4.primaryAddress')
    const v6 = $.lodash_get($network, 'v6.primaryAddress')
    if ($.lodash_get(arg, 'SSID') == 1) {
      SSID = $.lodash_get($network, 'wifi.ssid')
    }
    if (v4 && $.lodash_get(arg, 'LAN') == 1) {
      LAN_IPv4 = v4
    }
    if (v6 && $.lodash_get(arg, 'LAN') == 1 && $.lodash_get(arg, 'IPv6') == 1) {
      LAN_IPv6 = v6
    }
  } else if (typeof $config !== 'undefined') {
    try {
      let conf = $config.getConfig()
      $.log(conf)
      conf = JSON.parse(conf)
      if ($.lodash_get(arg, 'SSID') == 1) {
        SSID = $.lodash_get(conf, 'ssid')
      }
    } catch (e) {}
  } else if (typeof $environment !== 'undefined') {
    try {
      $.log($.toStr($environment))
      const version = $.lodash_get($environment, 'version')
      const os = version?.split(' ')?.[0]
      if (os !== 'macOS' && $.lodash_get(arg, 'SSID') == 1) {
        SSID = $.lodash_get($environment, 'ssid')
      } else if (os === 'macOS' && $.lodash_get(arg, 'LAN') == 1) {
        LAN_IPv4 = $.lodash_get($environment, 'ssid')
      }
    } catch (e) {}
  }
  if (LAN_IPv4 || LAN_IPv6) {
    LAN = ['LAN:', LAN_IPv4, maskIP(LAN_IPv6)].filter(i => i).join(' ')
  }
  if (LAN) {
    LAN = `${LAN}\n\n`
  }
  if (SSID) {
    SSID = `SSID: ${SSID}\n\n`
  } else {
    SSID = ''
  }
  let { PROXIES = [] } = await getProxies()
  let [
    { CN_IP = '', CN_INFO = '', CN_POLICY = '' } = {},
    { PROXY_IP = '', PROXY_INFO = '', PROXY_PRIVACY = '', PROXY_POLICY = '', ENTRANCE_IP = '' } = {},
    { CN_IPv6 = '' } = {},
    { PROXY_IPv6 = '' } = {},
  ] = await Promise.all(
    $.lodash_get(arg, 'IPv6') == 1
      ? [getDirectRequestInfo({ PROXIES }), getProxyRequestInfo({ PROXIES }), getDirectInfoIPv6(), getProxyInfoIPv6()]
      : [getDirectRequestInfo({ PROXIES }), getProxyRequestInfo({ PROXIES })]
  )
  let continueFlag = true
  if ($.lodash_get(arg, 'TYPE') === 'EVENT') {
    const lastNetworkInfoEvent = $.getjson('lastNetworkInfoEvent')
    if (
      CN_IP !== $.lodash_get(lastNetworkInfoEvent, 'CN_IP') ||
      CN_IPv6 !== $.lodash_get(lastNetworkInfoEvent, 'CN_IPv6') ||
      PROXY_IP !== $.lodash_get(lastNetworkInfoEvent, 'PROXY_IP') ||
      PROXY_IPv6 !== $.lodash_get(lastNetworkInfoEvent, 'PROXY_IPv6')
    ) {
      // Êúâ‰ªª‰Ωï‰∏ÄÈ°π‰∏çÂêå ÈÉΩÁªßÁª≠
      $.setjson({ CN_IP, PROXY_IP, CN_IPv6, PROXY_IPv6 }, 'lastNetworkInfoEvent')
    } else {
      // Âê¶Âàô Áõ¥Êé•ÁªìÊùü
      $.log('ÁΩëÁªú‰ø°ÊÅØÊú™ÂèëÁîüÂèòÂåñ, ‰∏çÁªßÁª≠')
      continueFlag = false
    }
  }
  if (continueFlag) {
    if ($.lodash_get(arg, 'PRIVACY') == '1' && PROXY_PRIVACY) {
      PROXY_PRIVACY = `\n${PROXY_PRIVACY}`
    }
    let ENTRANCE = ''
    if (ENTRANCE_IP) {
      const { IP: resolvedIP } = await resolveDomain(ENTRANCE_IP)
      if (resolvedIP) {
        $.log(`ÂÖ•Âè£ÂüüÂêçËß£Êûê: ${ENTRANCE_IP} ‚ûü ${resolvedIP}`)
        ENTRANCE_IP = resolvedIP
      }
    }
    if (ENTRANCE_IP && ENTRANCE_IP !== PROXY_IP) {
      const entranceDelay = parseFloat($.lodash_get(arg, 'ENTRANCE_DELAY') || 0)
      $.log(`ÂÖ•Âè£: ${ENTRANCE_IP} ‰∏éËêΩÂú∞ IP: ${PROXY_IP} ‰∏ç‰∏ÄËá¥, Á≠âÂæÖ ${entranceDelay} ÁßíÂêéÊü•ËØ¢ÂÖ•Âè£`)
      if (entranceDelay) {
        await $.wait(1000 * entranceDelay)
      }
      let [{ CN_INFO: ENTRANCE_INFO1 = '', isCN = false } = {}, { PROXY_INFO: ENTRANCE_INFO2 = '' } = {}] =
        await Promise.all([
          getDirectInfo(ENTRANCE_IP, $.lodash_get(arg, 'DOMESTIC_IPv4')),
          getProxyInfo(ENTRANCE_IP, $.lodash_get(arg, 'LANDING_IPv4')),
        ])
      // ÂõΩÂÜÖÊé•Âè£ÁöÑÂõΩÂ§ñ IP Ëß£ÊûêËøá‰∫éÁ¶ªË∞± ÊéíÈô§Êéâ
      if (ENTRANCE_INFO1 && isCN) {
        ENTRANCE = `ÂÖ•Âè£: ${maskIP(ENTRANCE_IP) || '-'}\n${maskAddr(ENTRANCE_INFO1)}`
      }
      if (ENTRANCE_INFO2) {
        if (ENTRANCE) {
          ENTRANCE = `${ENTRANCE.replace(/^(.*?):/gim, '$1¬π:')}\n${maskAddr(
            ENTRANCE_INFO2.replace(/^(.*?):/gim, '$1¬≤:')
          )}`
        } else {
          ENTRANCE = `ÂÖ•Âè£: ${maskIP(ENTRANCE_IP) || '-'}\n${maskAddr(ENTRANCE_INFO2)}`
        }
      }
    }
    if (ENTRANCE) {
      ENTRANCE = `${ENTRANCE}\n\n`
    }

    if (CN_IPv6 && isIPv6(CN_IPv6) && $.lodash_get(arg, 'IPv6') == 1) {
      CN_IPv6 = `\n${maskIP(CN_IPv6)}`
    } else {
      CN_IPv6 = ''
    }
    if (PROXY_IPv6 && isIPv6(PROXY_IPv6) && $.lodash_get(arg, 'IPv6') == 1) {
      PROXY_IPv6 = `\n${maskIP(PROXY_IPv6)}`
    } else {
      PROXY_IPv6 = ''
    }
    if ($.isSurge() || $.isStash()) {
      if (CN_POLICY === 'DIRECT') {
        CN_POLICY = ``
      } else {
        CN_POLICY = `Á≠ñÁï•: ${maskAddr(CN_POLICY) || '-'}\n`
      }
    }

    if (CN_INFO) {
      CN_INFO = `\n${CN_INFO}`
    }
    const policy_prefix = $.isQuanX() || $.isLoon() ? 'ËäÇÁÇπ: ' : '‰ª£ÁêÜÁ≠ñÁï•: '
    if (PROXY_POLICY === 'DIRECT') {
      PROXY_POLICY = `${policy_prefix}Áõ¥Ëøû`
    } else if (PROXY_POLICY) {
      PROXY_POLICY = `${policy_prefix}${maskAddr(PROXY_POLICY) || '-'}`
    } else {
      PROXY_POLICY = ''
    }
    if (PROXY_POLICY) {
      proxy_policy = PROXY_POLICY
    } else {
      proxy_policy = ''
    }

    if (PROXY_INFO) {
      PROXY_INFO = `\n${PROXY_INFO}`
    }
    title = `${PROXY_POLICY}`
    content = `${SSID}${LAN}${CN_POLICY}IP: ${maskIP(CN_IP) || '-'}${CN_IPv6}${maskAddr(
      CN_INFO
    )}\n\n${ENTRANCE}ËêΩÂú∞ IP: ${maskIP(PROXY_IP) || '-'}${PROXY_IPv6}${maskAddr(PROXY_INFO)}${PROXY_PRIVACY}`
    if (!isInteraction()) {
      content = `${content}\nÊâßË°åÊó∂Èó¥: ${new Date().toTimeString().split(' ')[0]}`
    }

    title = title || 'ÁΩëÁªú‰ø°ÊÅØ ùïè'
    if (isTile()) {
      await notify('ÁΩëÁªú‰ø°ÊÅØ', 'Èù¢Êùø', 'Êü•ËØ¢ÂÆåÊàê')
    } else if (!isPanel()) {
      if ($.lodash_get(arg, 'TYPE') === 'EVENT') {
        await notify(
          `üÑ≥ ${maskIP(CN_IP) || '-'} üÖø ${maskIP(PROXY_IP) || '-'}`.replace(/\n+/g, '\n').replace(/\ +/g, ' ').trim(),
          `${maskAddr(CN_INFO.replace(/(‰ΩçÁΩÆ|ËøêËê•ÂïÜ).*?:/g, '').replace(/\n/g, ' '))}`
            .replace(/\n+/g, '\n')
            .replace(/\ +/g, ' ')
            .trim(),
          `${maskAddr(PROXY_INFO.replace(/(‰ΩçÁΩÆ|ËøêËê•ÂïÜ).*?:/g, '').replace(/\n/g, ' '))}${
            CN_IPv6 ? `\nüÑ≥ ${CN_IPv6.replace(/\n+/g, '')}` : ''
          }${PROXY_IPv6 ? `\nüÖø ${PROXY_IPv6.replace(/\n+/g, '')}` : ''}${SSID ? `\n${SSID}` : '\n'}${LAN}`
            .replace(/\n+/g, '\n')
            .replace(/\ +/g, ' ')
            .trim()
        )
      } else {
        await notify('ÁΩëÁªú‰ø°ÊÅØ ùïè', title, content)
      }
    }
  }
})()
  .catch(async e => {
    $.logErr(e)
    $.logErr($.toStr(e))
    const msg = `${$.lodash_get(e, 'message') || $.lodash_get(e, 'error') || e}`
    title = `‚ùå`
    content = msg
    await notify('ÁΩëÁªú‰ø°ÊÅØ ùïè', title, content)
  })
  .finally(async () => {
    if (isRequest()) {
      result = {
        response: {
          status: 200,
          body: JSON.stringify(
            {
              title,
              content,
            },
            null,
            2
          ),
          headers: {
            'Content-Type': 'application/json; charset=UTF-8',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST,GET,OPTIONS,PUT,DELETE',
            'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',
          },
        },
      }
    } else {
      result = { title, content, ...arg }
    }
    $.log($.toStr(result))
    if (isInteraction()) {
      const html = `<div style="font-family: -apple-system; font-size: large">${`\n${content}${
        proxy_policy ? `\n\n${proxy_policy.replace(/^(.*?:\s*)(.*)$/, '$1<span style="color: #467fcf">$2</span>')}` : ''
      }`
        .replace(/^(.*?):/gim, '<span style="font-weight: bold">$1</span>:')
        .replace(/\n/g, '<br/>')}</div>`
      // $.log(html)
      $.done({
        title: 'ÁΩëÁªú‰ø°ÊÅØ ùïè',
        htmlMessage: html,
      })
    } else {
      $.done(result)
    }
  })

// ËØ∑Ê±Ç
async function http(opt = {}) {
  const TIMEOUT = parseFloat(opt.timeout || $.lodash_get(arg, 'TIMEOUT') || 5)
  const RETRIES = parseFloat(opt.retries || $.lodash_get(arg, 'RETRIES') || 1)
  const RETRY_DELAY = parseFloat(opt.retry_delay || $.lodash_get(arg, 'RETRY_DELAY') || 1)

  let timeout = TIMEOUT + 1
  timeout = $.isSurge() ? timeout : timeout * 1000

  let count = 0
  const fn = async () => {
    try {
      if (TIMEOUT) {
        // Surge, Loon, Stash ÈªòËÆ§‰∏∫ 5 Áßí
        return await Promise.race([
          $.http.get({ ...opt, timeout }),
          new Promise((_, reject) => setTimeout(() => reject(new Error('HTTP TIMEOUT')), TIMEOUT * 1000)),
        ])
      }
      return await $.http.get(opt)
    } catch (e) {
      if (count < RETRIES) {
        count++
        $.log(`Á¨¨ ${count} Ê¨°ËØ∑Ê±ÇÂ§±Ë¥•: ${e.message || e}, Á≠âÂæÖ ${RETRY_DELAY}s ÂêéÈáçËØï`)
        await $.wait(RETRY_DELAY * 1000)
        return await fn()
      }
    }
  }
  return await fn()
}

function parseQueryString(url) {
  const queryString = url.split('?')[1]
  const regex = /([^=&]+)=([^&]*)/g
  const params = {}
  let match

  while ((match = regex.exec(queryString))) {
    const key = decodeURIComponent(match[1])
    const value = decodeURIComponent(match[2])
    params[key] = value
  }

  return params
}

// Âà§Êñ≠ÁéØÂ¢É
function isRequest() {
  return typeof $request !== 'undefined'
}

function isPanel() {
  return $.isSurge() && typeof $input != 'undefined' && $.lodash_get($input, 'purpose') === 'panel'
}

function isTile() {
  return (
    $.isStash() &&
    ((typeof $script != 'undefined' && $.lodash_get($script, 'type') === 'tile') ||
      $.lodash_get(arg, 'TYPE') === 'TILE')
  )
}

function isInteraction() {
  return (
    ($.isQuanX() &&
      typeof $environment != 'undefined' &&
      $.lodash_get($environment, 'executor') === 'event-interaction') ||
    ($.isLoon() && typeof $environment != 'undefined' && $.lodash_get($environment, 'params.node'))
  )
}

// ÈÄöÁü•
async function notify(title, subt, desc, opts) {
  if ($.lodash_get(arg, 'TYPE') === 'EVENT' || $.lodash_get(arg, 'notify') == 1) {
    $.msg(title, subt, desc, opts)
  } else {
    $.log('üîï', title, subt, desc, opts)
  }
}

// prettier-ignore
function Env(t,e){class s{constructor(t){this.env=t}send(t,e="GET"){t="string"==typeof t?{url:t}:t;let s=this.get;return"POST"===e&&(s=this.post),new Promise((e,a)=>{s.call(this,t,(t,s,r)=>{t?a(t):e(s)})})}get(t){return this.send.call(this.env,t)}post(t){return this.send.call(this.env,t,"POST")}}return new class{constructor(t,e){this.name=t,this.http=new s(this),this.data=null,this.dataFile="box.dat",this.logs=[],this.isMute=!1,this.isNeedRewrite=!1,this.logSeparator="\n",this.encoding="utf-8",this.startTime=(new Date).getTime(),Object.assign(this,e),this.log("",`üîî${this.name}, ÂºÄÂßã!`)}getEnv(){return"undefined"!=typeof $environment&&$environment["surge-version"]?"Surge":"undefined"!=typeof $environment&&$environment["stash-version"]?"Stash":"undefined"!=typeof module&&module.exports?"Node.js":"undefined"!=typeof $task?"Quantumult X":"undefined"!=typeof $loon?"Loon":"undefined"!=typeof $rocket?"Shadowrocket":void 0}isNode(){return"Node.js"===this.getEnv()}isQuanX(){return"Quantumult X"===this.getEnv()}isSurge(){return"Surge"===this.getEnv()}isLoon(){return"Loon"===this.getEnv()}isShadowrocket(){return"Shadowrocket"===this.getEnv()}isStash(){return"Stash"===this.getEnv()}toObj(t,e=null){try{return JSON.parse(t)}catch{return e}}toStr(t,e=null){try{return JSON.stringify(t)}catch{return e}}getjson(t,e){let s=e;const a=this.getdata(t);if(a)try{s=JSON.parse(this.getdata(t))}catch{}return s}setjson(t,e){try{return this.setdata(JSON.stringify(t),e)}catch{return!1}}getScript(t){return new Promise(e=>{this.get({url:t},(t,s,a)=>e(a))})}runScript(t,e){return new Promise(s=>{let a=this.getdata("@chavy_boxjs_userCfgs.httpapi");a=a?a.replace(/\n/g,"").trim():a;let r=this.getdata("@chavy_boxjs_userCfgs.httpapi_timeout");r=r?1*r:20,r=e&&e.timeout?e.timeout:r;const[i,o]=a.split("@"),n={url:`http://${o}/v1/scripting/evaluate`,body:{script_text:t,mock_type:"cron",timeout:r},headers:{"X-Key":i,Accept:"*/*"},timeout:r};this.post(n,(t,e,a)=>s(a))}).catch(t=>this.logErr(t))}loaddata(){if(!this.isNode())return{};{this.fs=this.fs?this.fs:require("fs"),this.path=this.path?this.path:require("path");const t=this.path.resolve(this.dataFile),e=this.path.resolve(process.cwd(),this.dataFile),s=this.fs.existsSync(t),a=!s&&this.fs.existsSync(e);if(!s&&!a)return{};{const a=s?t:e;try{return JSON.parse(this.fs.readFileSync(a))}catch(t){return{}}}}}writedata(){if(this.isNode()){this.fs=this.fs?this.fs:require("fs"),this.path=this.path?this.path:require("path");const t=this.path.resolve(this.dataFile),e=this.path.resolve(process.cwd(),this.dataFile),s=this.fs.existsSync(t),a=!s&&this.fs.existsSync(e),r=JSON.stringify(this.data);s?this.fs.writeFileSync(t,r):a?this.fs.writeFileSync(e,r):this.fs.writeFileSync(t,r)}}lodash_get(t,e,s){const a=e.replace(/\[(\d+)\]/g,".$1").split(".");let r=t;for(const t of a)if(r=Object(r)[t],void 0===r)return s;return r}lodash_set(t,e,s){return Object(t)!==t?t:(Array.isArray(e)||(e=e.toString().match(/[^.[\]]+/g)||[]),e.slice(0,-1).reduce((t,s,a)=>Object(t[s])===t[s]?t[s]:t[s]=Math.abs(e[a+1])>>0==+e[a+1]?[]:{},t)[e[e.length-1]]=s,t)}getdata(t){let e=this.getval(t);if(/^@/.test(t)){const[,s,a]=/^@(.*?)\.(.*?)$/.exec(t),r=s?this.getval(s):"";if(r)try{const t=JSON.parse(r);e=t?this.lodash_get(t,a,""):e}catch(t){e=""}}return e}setdata(t,e){let s=!1;if(/^@/.test(e)){const[,a,r]=/^@(.*?)\.(.*?)$/.exec(e),i=this.getval(a),o=a?"null"===i?null:i||"{}":"{}";try{const e=JSON.parse(o);this.lodash_set(e,r,t),s=this.setval(JSON.stringify(e),a)}catch(e){const i={};this.lodash_set(i,r,t),s=this.setval(JSON.stringify(i),a)}}else s=this.setval(t,e);return s}getval(t){switch(this.getEnv()){case"Surge":case"Loon":case"Stash":case"Shadowrocket":return $persistentStore.read(t);case"Quantumult X":return $prefs.valueForKey(t);case"Node.js":return this.data=this.loaddata(),this.data[t];default:return this.data&&this.data[t]||null}}setval(t,e){switch(this.getEnv()){case"Surge":case"Loon":case"Stash":case"Shadowrocket":return $persistentStore.write(t,e);case"Quantumult X":return $prefs.setValueForKey(t,e);case"Node.js":return this.data=this.loaddata(),this.data[e]=t,this.writedata(),!0;default:return this.data&&this.data[e]||null}}initGotEnv(t){this.got=this.got?this.got:require("got"),this.cktough=this.cktough?this.cktough:require("tough-cookie"),this.ckjar=this.ckjar?this.ckjar:new this.cktough.CookieJar,t&&(t.headers=t.headers?t.headers:{},void 0===t.headers.Cookie&&void 0===t.cookieJar&&(t.cookieJar=this.ckjar))}get(t,e=(()=>{})){switch(t.headers&&(delete t.headers["Content-Type"],delete t.headers["Content-Length"],delete t.headers["content-type"],delete t.headers["content-length"]),t.params&&(t.url+="?"+this.queryStr(t.params)),this.getEnv()){case"Surge":case"Loon":case"Stash":case"Shadowrocket":default:this.isSurge()&&this.isNeedRewrite&&(t.headers=t.headers||{},Object.assign(t.headers,{"X-Surge-Skip-Scripting":!1})),$httpClient.get(t,(t,s,a)=>{!t&&s&&(s.body=a,s.statusCode=s.status?s.status:s.statusCode,s.status=s.statusCode),e(t,s,a)});break;case"Quantumult X":this.isNee
